var searchIndex = new Map(JSON.parse('[\
["memcached_network_types",{"t":"CQCPPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPPGPFPPPPPPPPPPPPPPPPPPPPGPFGPFGPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNOOONNNNNNNNNNNNNNNNOOOOOOOOOOOONNNNNNNNNNNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNOKKKNNNNNNNNNNNNNNNNNNNNNN","n":["binary","integer_enum","prelude","Add","AddQ","Append","AppendQ","AuthenticationContinue","AuthenticationError","Busy","DataType","Decrement","DecrementQ","DelVBucket","Delete","DeleteQ","Flush","FlushQ","Gat","Gatq","Get","GetK","GetKQ","GetQ","GetVBucket","IncrOrDecrOnNumericValue","Increment","IncrementQ","InternalError","InvalidArguments","ItemNotStored","KeyExists","KeyNotFound","NoError","NoOp","NotSupported","Opcode","OutOfMemory","PacketHeader","Prepend","PrependQ","Quit","QuitQ","RAppend","RAppendQ","RDecr","RDecrQ","RDelete","RDeleteQ","RGet","RIncr","RIncrQ","RPrepend","RPrependQ","RSet","RSetQ","RawBytes","Replace","ReplaceQ","ReqMagicByte","ReqPacket","ReqPacketHeader","ResMagicByte","ResPacket","ResPacketHeader","ResponseStatus","SaslAuth","SaslListMechs","SaslStep","Set","SetQ","SetVBucket","Stat","TapCheckpointEnd","TapCheckpointStart","TapConnect","TapDelete","TapFlush","TapMutation","TapOpaque","TapVBucketSet","TemporaryFailure","Touch","UnknownCommand","VBucketBelongsToAnotherServer","ValueTooLarge","Verbosity","Version","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cas","cas","cas","clone","clone","clone","clone","clone","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","data_type","data_type","data_type","eq","eq","eq","eq","eq","eq","eq","eq","extras_length","extras_length","extras_length","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","key_length","key_length","key_length","magic_byte","magic_byte","magic_byte","opaque","opaque","opaque","opcode","opcode","opcode","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","ref_from","ref_from","ref_req_packet_header_with_get_opcode_from","ref_req_packet_header_with_opcode_from","ref_req_packet_header_with_possible_opcode_from","ref_req_packet_header_with_set_opcode_from","status","status_or_vbucket","total_body_length","total_body_length","total_body_length","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vbucket","AsBytes","FromBytes","FromZeroes","as_bytes","as_bytes_mut","mut_from","mut_from_prefix","mut_from_suffix","mut_slice_from","mut_slice_from_prefix","mut_slice_from_suffix","new_zeroed","read_from","read_from_prefix","read_from_suffix","ref_from","ref_from_prefix","ref_from_suffix","slice_from","slice_from_prefix","slice_from_suffix","write_to","write_to_prefix","write_to_suffix","zero"],"q":[[0,"memcached_network_types"],[3,"memcached_network_types::binary"],[221,"memcached_network_types::prelude"],[246,"core::cmp"],[247,"core::option"],[248,"core::result"],[249,"core::any"],[250,"zerocopy"]],"i":[0,0,0,7,7,7,7,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,6,6,6,6,6,6,7,6,0,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,7,7,0,3,0,0,4,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,6,6,6,7,7,3,4,5,6,7,10,11,12,3,4,5,6,7,10,11,12,10,11,12,3,4,5,6,7,3,3,4,4,5,5,6,6,7,7,3,4,5,6,7,10,11,12,10,11,12,3,4,5,6,7,10,11,12,10,11,12,3,4,5,6,7,10,11,12,3,4,5,6,7,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,3,4,5,6,7,10,11,12,11,12,11,11,11,11,12,10,10,11,12,3,3,4,4,5,5,6,6,7,7,10,11,12,3,4,5,6,7,10,11,12,3,4,5,6,7,10,11,12,11,0,0,0,20,20,21,21,21,21,21,21,24,21,21,21,21,21,21,21,21,21,20,20,20,24],"f":"````````````````````````````````````````````````````````````````````````````````````````{{{b{c}}}{{b{e}}}{}{}}0000000{{{b{dc}}}{{b{de}}}{}{}}0000000```{{{b{f}}}f}{{{b{h}}}h}{{{b{j}}}j}{{{b{l}}}l}{{{b{n}}}n}{{{b{c}}}A`{}}000000000{{{b{f}}{b{f}}}Ab}{{{b{h}}{b{h}}}Ab}{{{b{j}}{b{j}}}Ab}{{{b{l}}{b{l}}}Ab}{{{b{n}}{b{n}}}Ab}{{{b{Ad}}{b{Ad}}}Ab}{{{b{Af}}{b{Af}}}Ab}{{{b{Ah}}{b{Ah}}}Ab}```{{{b{f}}{b{f}}}Aj}{{{b{h}}{b{h}}}Aj}{{{b{j}}{b{j}}}Aj}{{{b{l}}{b{l}}}Aj}{{{b{n}}{b{n}}}Aj}{{{b{Ad}}{b{Ad}}}Aj}{{{b{Af}}{b{Af}}}Aj}{{{b{Ah}}{b{Ah}}}Aj}```{cc{}}0000000{ce{}{}}0000000````````````{{{b{f}}{b{f}}}{{Al{Ab}}}}{{{b{h}}{b{h}}}{{Al{Ab}}}}{{{b{j}}{b{j}}}{{Al{Ab}}}}{{{b{l}}{b{l}}}{{Al{Ab}}}}{{{b{n}}{b{n}}}{{Al{Ab}}}}{{{b{Ad}}{b{Ad}}}{{Al{Ab}}}}{{{b{Af}}{b{Af}}}{{Al{Ab}}}}{{{b{Ah}}{b{Ah}}}{{Al{Ab}}}}{{{b{{B`{An}}}}}{{Al{{b{Af}}}}}}{{{b{{B`{An}}}}}{{Al{{b{Ah}}}}}}11{{{b{{B`{An}}}}{b{{B`{n}}}}}{{Al{{b{Af}}}}}}2`````{c{{Bb{e}}}{}{}}{An{{Bb{fc}}}{}}1{An{{Bb{hc}}}{}}2{An{{Bb{jc}}}{}}3{Bd{{Bb{lc}}}{}}4{An{{Bb{nc}}}{}}55555555555{{{b{c}}}Bf{}}0000000````{{{b{Bh}}}{{b{{B`{An}}}}}}{{{b{dBh}}}{{b{d{B`{An}}}}}}{{{b{d{B`{An}}}}}{{Al{{b{dBj}}}}}}00{{{b{d{B`{An}}}}}{{Al{{b{d{B`{Bj}}}}}}}}{{{b{d{B`{An}}}}Bl}{{Al{{Bn{{b{d{B`{Bj}}}}{b{d{B`{An}}}}}}}}}}{{{b{d{B`{An}}}}Bl}{{Al{{Bn{{b{d{B`{An}}}}{b{d{B`{Bj}}}}}}}}}}{{}C`}{{{b{{B`{An}}}}}{{Al{Bj}}}}00{{{b{{B`{An}}}}}{{Al{{b{Bj}}}}}}00{{{b{{B`{An}}}}}{{Al{{b{{B`{Bj}}}}}}}}{{{b{{B`{An}}}}Bl}{{Al{{Bn{{b{{B`{Bj}}}}{b{{B`{An}}}}}}}}}}{{{b{{B`{An}}}}Bl}{{Al{{Bn{{b{{B`{An}}}}{b{{B`{Bj}}}}}}}}}}{{{b{Bh}}{b{d{B`{An}}}}}{{Al{A`}}}}00{{{b{dC`}}}A`}","D":"Ej","p":[[1,"reference"],[0,"mut"],[6,"ReqMagicByte",3],[6,"ResMagicByte",3],[6,"DataType",3],[6,"ResponseStatus",3],[6,"Opcode",3],[1,"unit"],[6,"Ordering",246],[5,"PacketHeader",3],[5,"ReqPacketHeader",3],[5,"ResPacketHeader",3],[1,"bool"],[6,"Option",247],[1,"u8"],[1,"slice"],[6,"Result",248],[1,"u16"],[5,"TypeId",249],[10,"AsBytes",221,250],[10,"FromBytes",221,250],[1,"usize"],[1,"tuple"],[10,"FromZeroes",221,250]],"r":[[221,250],[222,250],[223,250]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAMkABAACAAAABACMAKEAFgC5ACQA"}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
