var searchIndex = new Map(JSON.parse('[\
["memcached_network_types",{"t":"CCPPPPKPPPGPPPPPPPKKPPPPPPPPPPPPPPPPPPGPFPPPPPPPPPPPPPPPPPPPPGPFGPFGPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNOOONNNNNNNNOOONNNNNNNNNNNNNNNNOOOOOONNNNNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNFNNNNOOONNNO","n":["binary","udp","Add","AddQ","Append","AppendQ","AsBytes","AuthenticationContinue","AuthenticationError","Busy","DataType","Decrement","DecrementQ","DelVBucket","Delete","DeleteQ","Flush","FlushQ","FromBytes","FromZeroes","Gat","Gatq","Get","GetK","GetKQ","GetQ","GetVBucket","IncrOrDecrOnNumericValue","Increment","IncrementQ","InternalError","InvalidArguments","ItemNotStored","KeyExists","KeyNotFound","NoError","NoOp","NotSupported","Opcode","OutOfMemory","PacketHeader","Prepend","PrependQ","Quit","QuitQ","RAppend","RAppendQ","RDecr","RDecrQ","RDelete","RDeleteQ","RGet","RIncr","RIncrQ","RPrepend","RPrependQ","RSet","RSetQ","RawBytes","Replace","ReplaceQ","ReqMagicByte","ReqPacket","ReqPacketHeader","ResMagicByte","ResPacket","ResPacketHeader","ResponseStatus","SaslAuth","SaslListMechs","SaslStep","Set","SetQ","SetVBucket","Stat","TapCheckpointEnd","TapCheckpointStart","TapConnect","TapDelete","TapFlush","TapMutation","TapOpaque","TapVBucketSet","TemporaryFailure","Touch","UnknownCommand","VBucketBelongsToAnotherServer","ValueTooLarge","Verbosity","Version","as_bytes","as_bytes_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cas","cas","cas","clone","clone","clone","clone","clone","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","cmp","cmp","cmp","cmp","cmp","data_type","data_type","data_type","eq","eq","eq","eq","eq","eq","eq","eq","extras_length","extras_length","extras_length","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","key_length","key_length","key_length","magic_byte","magic_byte","magic_byte","mut_from","mut_from_prefix","mut_from_suffix","mut_slice_from","mut_slice_from_prefix","mut_slice_from_suffix","new_zeroed","opaque","opaque","opaque","opcode","opcode","opcode","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","read_from","read_from_prefix","read_from_suffix","ref_from","ref_from","ref_from","ref_from_packet_header","ref_from_packet_header","ref_from_prefix","ref_from_suffix","ref_req_packet_header_with_get_opcode_from","ref_req_packet_header_with_opcode_from","ref_req_packet_header_with_possible_opcode_from","ref_req_packet_header_with_set_opcode_from","slice_from","slice_from_prefix","slice_from_suffix","status","status_or_vbucket","total_body_length","total_body_length","total_body_length","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vbucket","write_to","write_to_prefix","write_to_suffix","zero","MemcachedUdpHeader","borrow","borrow_mut","from","into","num_dgram","request_id","seq_num","try_from","try_into","type_id","unused"],"q":[[0,"memcached_network_types"],[2,"memcached_network_types::binary"],[241,"memcached_network_types::udp"],[253,"zerocopy"],[254,"core::cmp"],[255,"core::option"],[256,"core::result"],[257,"core::any"]],"i":[0,0,10,10,10,10,0,9,9,9,0,10,10,10,10,10,10,10,0,0,10,10,10,10,10,10,10,9,10,10,9,9,9,9,9,9,10,9,0,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,0,6,0,0,7,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,9,9,10,10,1,1,6,7,8,9,10,14,15,16,6,7,8,9,10,14,15,16,14,15,16,6,7,8,9,10,6,6,7,7,8,8,9,9,10,10,6,7,8,9,10,14,15,16,6,7,8,9,10,14,15,16,14,15,16,6,7,8,9,10,14,15,16,6,7,8,9,10,14,15,16,14,15,16,14,15,16,17,17,17,17,17,17,21,14,15,16,14,15,16,6,7,8,9,10,17,17,17,17,15,16,15,16,17,17,15,15,15,15,17,17,17,16,14,14,15,16,6,6,7,7,8,8,9,9,10,10,14,15,16,6,7,8,9,10,14,15,16,6,7,8,9,10,14,15,16,15,1,1,1,21,0,25,25,25,25,25,25,25,25,25,25,25],"f":"``````````````````````````````````````````````````````````````````````````````````````````{{{d{b}}}{{d{{h{f}}}}}}{{{d{jb}}}{{d{j{h{f}}}}}}{{{d{c}}}{{d{e}}}{}{}}0000000{{{d{jc}}}{{d{je}}}{}{}}0000000```{{{d{l}}}l}{{{d{n}}}n}{{{d{A`}}}A`}{{{d{Ab}}}Ab}{{{d{Ad}}}Ad}{{{d{c}}}Af{}}000000000{{{d{l}}{d{l}}}Ah}{{{d{n}}{d{n}}}Ah}{{{d{A`}}{d{A`}}}Ah}{{{d{Ab}}{d{Ab}}}Ah}{{{d{Ad}}{d{Ad}}}Ah}```{{{d{l}}{d{l}}}Aj}{{{d{n}}{d{n}}}Aj}{{{d{A`}}{d{A`}}}Aj}{{{d{Ab}}{d{Ab}}}Aj}{{{d{Ad}}{d{Ad}}}Aj}{{{d{Al}}{d{Al}}}Aj}{{{d{An}}{d{An}}}Aj}{{{d{B`}}{d{B`}}}Aj}```{cc{}}0000000{ce{}{}}0000000``````{{{d{j{h{f}}}}}{{Bd{{d{jBb}}}}}}00{{{d{j{h{f}}}}}{{Bd{{d{j{h{Bb}}}}}}}}{{{d{j{h{f}}}}Bf}{{Bd{{Bh{{d{j{h{Bb}}}}{d{j{h{f}}}}}}}}}}{{{d{j{h{f}}}}Bf}{{Bd{{Bh{{d{j{h{f}}}}{d{j{h{Bb}}}}}}}}}}{{}Bj}``````{{{d{l}}{d{l}}}{{Bd{Ah}}}}{{{d{n}}{d{n}}}{{Bd{Ah}}}}{{{d{A`}}{d{A`}}}{{Bd{Ah}}}}{{{d{Ab}}{d{Ab}}}{{Bd{Ah}}}}{{{d{Ad}}{d{Ad}}}{{Bd{Ah}}}}{{{d{{h{f}}}}}{{Bd{Bb}}}}00{{{d{{h{f}}}}}{{Bd{{d{Bb}}}}}}{{{d{{h{f}}}}}{{Bd{{d{An}}}}}}{{{d{{h{f}}}}}{{Bd{{d{B`}}}}}}{{{d{Al}}}{{Bd{{d{An}}}}}}{{{d{Al}}}{{Bd{{d{B`}}}}}}4433{{{d{{h{f}}}}{d{{h{Ad}}}}}{{Bd{{d{An}}}}}}4{{{d{{h{f}}}}}{{Bd{{d{{h{Bb}}}}}}}}{{{d{{h{f}}}}Bf}{{Bd{{Bh{{d{{h{Bb}}}}{d{{h{f}}}}}}}}}}{{{d{{h{f}}}}Bf}{{Bd{{Bh{{d{{h{f}}}}{d{{h{Bb}}}}}}}}}}`````{c{{Bl{e}}}{}{}}{f{{Bl{lc}}}{}}1{f{{Bl{nc}}}{}}2{f{{Bl{A`c}}}{}}{Bn{{Bl{Abc}}}{}}44{f{{Bl{Adc}}}{}}55555555555{{{d{c}}}C`{}}0000000`{{{d{b}}{d{j{h{f}}}}}{{Bd{Af}}}}00{{{d{jBj}}}Af}`{{{d{c}}}{{d{e}}}{}{}}{{{d{jc}}}{{d{je}}}{}{}}{cc{}}{ce{}{}}```<<6`","D":"En","p":[[10,"AsBytes",2,253],[1,"reference"],[1,"u8"],[1,"slice"],[0,"mut"],[6,"ReqMagicByte",2],[6,"ResMagicByte",2],[6,"DataType",2],[6,"ResponseStatus",2],[6,"Opcode",2],[1,"unit"],[6,"Ordering",254],[1,"bool"],[5,"PacketHeader",2],[5,"ReqPacketHeader",2],[5,"ResPacketHeader",2],[10,"FromBytes",2,253],[6,"Option",255],[1,"usize"],[1,"tuple"],[10,"FromZeroes",2,253],[6,"Result",256],[1,"u16"],[5,"TypeId",257],[5,"MemcachedUdpHeader",241]],"r":[[6,253],[18,253],[19,253]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAM4ADAADAAMACAAKABUARQBdADQAogAFAK8ACgC+AAMAxAAAAMYAAQDLACIA8gACAPcABgA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
